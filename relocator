#!/usr/bin/env ruby

require 'highline/import'
require_relative 'lib/environment'

pup = ""
choose do |menu|
  menu.prompt = "Please choose your favorite programming language?  "

  menu.choice(:ruby) { say("This should be <%= color('bold', BOLD) %>!")}
  menu.choices(:python, :perl) do |chosen|
    say("Yo you picked #{chosen}")
    pup = chosen
  end
end
pete = ask("Company?  ") { |q| q.default = "none" }

puts pete



# database = Environment.database_connection(options[:environment])
#     # This is ripe for a SQL injection attack:
#     statement = "insert into purchases(name, calories, price) values('#{options[:name]}', #{options[:calories]}, #{options[:price]})"
#     database.execute(statement)
#     puts "A purchase named #{options[:name]}, with #{options[:calories]} calories and $#{options[:price]} cost was created."













# Examples

# Basic usage:
# ask("Company?  ") { |q| q.default = "none" }

# Validation:
# ask("Age?  ", Integer) { |q| q.in = 0..105 }
# ask("Name?  (last, first)  ") { |q| q.validate = /\A\w+, ?\w+\Z/ }

# Type conversion for answers:
# ask("Birthday?  ", Date)
# ask("Interests?  (comma sep list)  ", lambda { |str| str.split(/,\s*/) })

# Reading passwords:
# ask("Enter your password:  ") { |q| q.echo = false }
# ask("Enter your password:  ") { |q| q.echo = "x" }

# ERb based output (with HighLine's ANSI color tools):
# say("This should be <%= color('bold', BOLD) %>!")

# Menus:
# choose do |menu|
#   menu.prompt = "Please choose your favorite programming language?  "
#   menu.choice(:ruby) { say("Good choice!") }
#   menu.choices(:python, :perl) { say("Not from around here, are you?") }
# end






